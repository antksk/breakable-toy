package com.github.antksk.breakabletoy.algo.programmers._2020.la;

import org.junit.Test;

import lombok.extern.slf4j.Slf4j;

/**
 * 철수는 다양한 금액이 든 통장 여러 개를 가지고 있습니다. 오늘 철수는 다음 규칙에 따라 통장 예금액을 정리해서 사용 통장 개수를 줄이려 합니다.
 *
 * 각 통장에는 최대 n원 까지만 예금합니다.
 * 한 통장에 든 예금액을 다른 통장으로 옮겨 하나로 합칩니다.
 * 예금액은 한 번에 모든 금액을 이동합니다.
 * 즉, 한 통장에 든 예금액을 여러 통장에 나누어 이동하지는 않습니다.
 * 통장을 합치는 도중에도 예금액이 n원을 넘어서는 안됩니다.
 * 예금액이 든 통장 개수가 최대한 적어지도록 합니다.
 * 예를 들어 통장을 총 6개 사용 중이고, 각 통장에 든 예금액이 [8백, 4백, 2백, 5백, 3백, 7백] 만원이며, 한 통장에 최대 1천만 원까지만 예금한다고 하겠습니다. 이때, [2백, 5백, 3백] 만원 통장을 하나로 합치면 각
 * 통장에 든 금액은 [8백, 4백, 1천, 7백] 만원이 되며, 사용 통장 개수를 4개로 줄일 수 있습니다. 그러나, [8백, 2백], [3백, 7백], [4백, 5백] 만원 통장끼리 하나로 합친다면 각 통장에 든 금액은 [1천, 1천,
 * 9백] 만원이 됩니다. 따라서 사용 통장 개수를 3개까지 줄일 수 있습니다.
 *
 * 한 통장에 넣는 최대 금액 n, 각 통장에 든 예금액이 담긴 배열 bankbook이 매개변수로 주어질 때, 통장을 적절히 합쳤을 때 예금액이 든 통장 개수의 최솟값을 return 하도록 solution 함수를 완성해주세요.
 *
 * 제한사항
 * n은 1 이상 40 이하인 자연수입니다.
 * bankbook의 길이는 1 이상 12 이하입니다.
 * bankbook의 원소는 각 통장에 든 예금액을 나타내며, 1 이상 n 이하인 자연수입니다.
 * 예금액은 백만원 단위로만 주어집니다.
 * 예를 들어, 원소의 값이 5이면 5백만 원, 20이면 2천만 원을 나타냅니다.
 * 통장을 하나도 줄일 수 없다면 처음에 주어진 통장 개수를 return 하면 됩니다.
 *
 * n	bankbook	result
 * 10	[8,4,2,5,3,7]	3
 * 10	[1,2,3,3,3,8]	2
 */
@Slf4j
public class Test_3 {
    public int[] solution(int[] price) {
        return null;
    }

    @Test
    public void test() {
        log.debug("{}", solution(new int[]{4, 1, 4, 7, 6}));
    }
}
